{"version":3,"file":"fx.js","sourceRoot":"","sources":["../../../src/Lazy/fx.ts"],"names":[],"mappings":"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","sourcesContent":["import { isAsyncIterable, isIterable } from \"../_internal/utils\";\nimport consume from \"../consume\";\nimport each from \"../each\";\nimport every from \"../every\";\nimport find from \"../find\";\nimport findIndex from \"../findIndex\";\nimport groupBy from \"../groupBy\";\nimport indexBy from \"../indexBy\";\nimport isUndefined from \"../isUndefined\";\nimport join from \"../join\";\nimport reduce from \"../reduce\";\nimport some from \"../some\";\nimport type Cast from \"../types/Cast\";\nimport type { DeepFlat } from \"../types/DeepFlat\";\nimport type IterableInfer from \"../types/IterableInfer\";\nimport type Key from \"../types/Key\";\nimport type { SyncReducer } from \"../types/Reducer\";\nimport concurrent from \"./concurrent\";\nimport drop from \"./drop\";\nimport filter from \"./filter\";\nimport flat from \"./flat\";\nimport flatMap from \"./flatMap\";\nimport map from \"./map\";\nimport peek from \"./peek\";\nimport reject from \"./reject\";\nimport slice from \"./slice\";\nimport take from \"./take\";\nimport takeUntil from \"./takeUntil\";\nimport takeWhile from \"./takeWhile\";\nimport toAsync from \"./toAsync\";\n\nclass FxAsyncIterable<A> {\n  private asyncIterable: AsyncIterable<A>;\n\n  constructor(asyncIterable: AsyncIterable<A>) {\n    this.asyncIterable = asyncIterable;\n  }\n\n  [Symbol.asyncIterator]() {\n    return this.asyncIterable[Symbol.asyncIterator]();\n  }\n\n  /**\n   * Returns AsyncIterable of values by running each applying `f`.\n   *\n   * see {@link https://fxts.dev/docs/map | map}\n   */\n  map<B>(f: (a: A) => B) {\n    return new FxAsyncIterable(map(f, this.asyncIterable));\n  }\n\n  /**\n   * Returns flattened AsyncIterable of values by running each element\n   * flattening the mapped results.\n   *\n   * see {@link https://fxts.dev/docs/flatMap | flatMap}\n   */\n  flatMap<B>(f: (a: A) => B) {\n    return new FxAsyncIterable(flatMap(f, this.asyncIterable));\n  }\n\n  /**\n   * Returns flattened AsyncIterable.\n   * If first argument is number, more perform flatten\n   *\n   * @example\n   * ```\n   * await fx([[1],[[2]]])\n   *   .toAsync()\n   *   .flat(2).toArray(); // [1,2]\n   * ```\n   *\n   * see {@link https://fxts.dev/docs/flat | flat}\n   */\n  flat<T extends number = 1>(depth?: T) {\n    return new FxAsyncIterable(\n      flat(this.asyncIterable, depth),\n    ) as FxAsyncIterable<DeepFlat<A, T>>;\n  }\n\n  /**\n   * Return AsyncIterable of all elements `f` returns truthy for\n   *\n   * see {@link https://fxts.dev/docs/filter | filter}\n   */\n  filter(f: (a: A) => unknown): FxAsyncIterable<A> {\n    return new FxAsyncIterable(filter(f, this.asyncIterable));\n  }\n\n  /**\n   * The opposite of filter method\n   * AsyncIterable of all elements `f` returns falsy for\n   *\n   * see {@link https://fxts.dev/docs/reject | reject}\n   */\n  reject(f: (a: A) => unknown): FxAsyncIterable<A> {\n    return new FxAsyncIterable(reject(f, this.asyncIterable));\n  }\n\n  /**\n   * Returns AsyncIterable that taken the first argument `l` values from asyncIterable\n   *\n   * see {@link https://fxts.dev/docs/take | take}\n   */\n  take(n: number): FxAsyncIterable<A> {\n    return new FxAsyncIterable(take(n, this.asyncIterable));\n  }\n\n  /**\n   * Returns AsyncIterable that taken values until truthy when given `f` is applied.\n   *\n   * see {@link https://fxts.dev/docs/takeUntil | takeUntil}\n   */\n  takeUntil(f: (a: A) => unknown): FxAsyncIterable<A> {\n    return new FxAsyncIterable(takeUntil(f, this.asyncIterable));\n  }\n\n  /**\n   * Returns AsyncIterable that taken values as long as each value satisfies the give `f`.\n   *\n   * see {@link https://fxts.dev/docs/takeWhile | takeWhile}\n   */\n  takeWhile(f: (a: A) => unknown): FxAsyncIterable<A> {\n    return new FxAsyncIterable(takeWhile(f, this.asyncIterable));\n  }\n\n  /**\n   * Iterate over an input list,\n   * calling a provided `f` for each element in the AsyncIterable.\n   *\n   * see {@link https://fxts.dev/docs/peek | peek}\n   */\n  peek(f: (a: A) => unknown): FxAsyncIterable<A> {\n    return new FxAsyncIterable(peek(f, this.asyncIterable));\n  }\n\n  /**\n   * Returns all but the first `length` elements of the given asyncIterable.\n   *\n   * see {@link https://fxts.dev/docs/drop | drop}\n   */\n  drop(length: number): FxAsyncIterable<A> {\n    return new FxAsyncIterable(drop(length, this.asyncIterable));\n  }\n\n  /**\n   * Returns AsyncIterable of the given elements from startIndex(inclusive) to endIndex(exclusive).\n   *\n   * see {@link https://fxts.dev/docs/slice | slice}\n   */\n  slice(start: number, end?: number): FxAsyncIterable<A> {\n    return isUndefined(end)\n      ? new FxAsyncIterable(slice(start, this.asyncIterable))\n      : new FxAsyncIterable(slice(start, end, this.asyncIterable));\n  }\n\n  /**\n   *\n   * `chain` allows you to use functions that are not provided in method chaining.\n   * The functions available for the `chain` argument return an iterable.\n   *\n   * @example\n   * ```\n   * await fx(toAsync(range(1, 4)))\n   *   .chain(append(4))\n   *   .chain(append(5))\n   *   .toArray(); // [1, 2, 3, 4, 5]\n   * ```\n   */\n  chain<B>(\n    f: (asyncIterable: AsyncIterable<A>) => AsyncIterable<Awaited<B>>,\n  ): FxAsyncIterable<B> {\n    return new FxAsyncIterable(f(this.asyncIterable));\n  }\n\n  /**\n   * Concurrent is used to balance the load of multiple asynchronous requests.\n   * The first argument receives a number that controls the number of loads, and the second argument is an AsyncIterable.\n   *\n   * see {@link https://fxts.dev/docs/concurrent | concurrent}\n   */\n  concurrent(length: number) {\n    return new FxAsyncIterable(concurrent(length, this.asyncIterable));\n  }\n\n  async consume() {\n    return consume(this.asyncIterable);\n  }\n\n  /**\n   * Splits AsyncIterable into sets, grouped by the result of running each value through `f`.\n   *\n   * see {@link https://fxts.dev/docs/groupBy | groupBy}\n   */\n  async groupBy(f: (a: A) => Key) {\n    return groupBy(f, this.asyncIterable);\n  }\n\n  /**\n   * Given `f` that generates a key,\n   * turns a list of objects into an object indexing the objects by the given key.\n   * Note that if multiple objects generate the same value for the indexing key only the last value will be included in the generated object.\n   *\n   * see {@link https://fxts.dev/docs/indexBy | indexBy}\n   */\n  async indexBy(f: (a: A) => Key) {\n    return indexBy(f, this.asyncIterable);\n  }\n\n  /**\n   * Returns true if any of the values in AsyncIterable pass `f` truth test\n   *\n   * see {@link https://fxts.dev/docs/some | some}\n   */\n  async some(f: (a: A) => unknown): Promise<boolean> {\n    return some(f, this.asyncIterable);\n  }\n\n  /**\n   * Returns true if all of the values in AsyncIterable pass the `f` truth test.\n   *\n   * see {@link https://fxts.dev/docs/every | every}\n   */\n  async every(f: (a: A) => unknown): Promise<boolean> {\n    return every(f, this.asyncIterable);\n  }\n\n  /**\n   * Returns all elements in the given iterable into a string separated by separator.\n   *\n   * see {@link https://fxts.dev/docs/join | join}\n   */\n  async join(sep: string): Promise<string> {\n    return join(sep, this.asyncIterable);\n  }\n\n  /**\n   * Looks through each value in AsyncIterable, returning the first one that passes a truth test `f`,\n   * or `undefined` if no value passes the test.\n   *\n   * see {@link https://fxts.dev/docs/find | find}\n   */\n  async find(f: (a: A) => unknown): Promise<A | undefined> {\n    return find(f, this.asyncIterable);\n  }\n\n  /**\n   * Returns the index of the first element of AsyncIterable which matches f, or -1 if no element matches.\n   *\n   * see {@link https://fxts.dev/docs/findIndex | findIndex}\n   */\n  async findIndex(f: (a: A) => unknown): Promise<number> {\n    return findIndex(f, this.asyncIterable);\n  }\n\n  /**\n   * Also known as foldl, this method boils down a list of values into a single value.\n   *\n   * see {@link https://fxts.dev/docs/reduce | reduce}\n   */\n  async reduce<B>(\n    f: SyncReducer<Cast<A, B>, A>,\n    seed?: B,\n  ): Promise<Cast<A, B>> {\n    return isUndefined(seed)\n      ? reduce(f, this.asyncIterable)\n      : reduce(f, seed as any, this.asyncIterable);\n  }\n\n  /**\n   * Iterates over AsyncIterable, applying each in turn to `f`.\n   *\n   * see {@link https://fxts.dev/docs/each | each}\n   */\n  async each(f: (a: A) => unknown): Promise<void> {\n    return each(f, this.asyncIterable);\n  }\n\n  /**\n   * Takes item from AsyncIterable and returns an array.\n   *\n   * see {@link https://fxts.dev/docs/toArray | toArray}\n   */\n  async toArray(): Promise<Array<Awaited<A>>> {\n    const array: Awaited<A>[] = [];\n    for await (const a of this.asyncIterable) {\n      array.push(a);\n    }\n    return array;\n  }\n}\n\nexport class FxIterable<A> {\n  private iterable: Iterable<A>;\n\n  constructor(iterable: Iterable<A>) {\n    this.iterable = iterable;\n  }\n\n  [Symbol.iterator]() {\n    return this.iterable[Symbol.iterator]();\n  }\n\n  /**\n   * Returns Iterable of values by running each applying `f`.\n   *\n   * see {@link https://fxts.dev/docs/map | map}\n   */\n  map<B>(f: (a: A) => B): FxIterable<B> {\n    return new FxIterable(map(f, this.iterable));\n  }\n\n  /**\n   * Returns flattened Iterable of values by running each element\n   * flattening the mapped results.\n   *\n   * see {@link https://fxts.dev/docs/flatMap | flatMap}\n   */\n  flatMap<B>(f: (a: A) => B) {\n    return new FxIterable(flatMap(f, this.iterable));\n  }\n\n  /**\n   * Returns flattened Iterable.\n   * If first argument is number, more perform flatten\n   *\n   * @example\n   * `fx([[1],[[2]]]).flat(2).toArray(); // [1,2]`\n   *\n   * see {@link https://fxts.dev/docs/flat | flat}\n   */\n  flat<T extends number = 1>(depth?: T) {\n    const res = flat(this.iterable, depth);\n\n    return new FxIterable(res) as FxIterable<DeepFlat<A, T>>;\n  }\n\n  /**\n   * Return Iterable of all elements `f` returns truthy for\n   *\n   * see {@link https://fxts.dev/docs/filter | filter}\n   */\n  filter(f: (a: A) => unknown): FxIterable<A> {\n    return new FxIterable(filter(f, this.iterable));\n  }\n\n  /**\n   * The opposite of filter method\n   * Iterable of all elements `f` returns falsy for\n   *\n   * see {@link https://fxts.dev/docs/reject | reject}\n   */\n  reject(f: (a: A) => unknown): FxIterable<A> {\n    return new FxIterable(reject(f, this.iterable));\n  }\n\n  /**\n   * Returns Iterable that taken the first argument `l` values from iterable\n   *\n   * see {@link https://fxts.dev/docs/take | take}\n   */\n  take(n: number): FxIterable<A> {\n    return new FxIterable(take(n, this.iterable));\n  }\n\n  /**\n   * Returns Iterable that taken values until truthy when given `f` is applied.\n   *\n   * see {@link https://fxts.dev/docs/takeUntil | takeUntil}\n   */\n  takeUntil(f: (a: A) => unknown): FxIterable<A> {\n    return new FxIterable(takeUntil(f, this.iterable));\n  }\n\n  /**\n   * Returns Iterable that taken values as long as each value satisfies the give `f`.\n   *\n   * see {@link https://fxts.dev/docs/takeWhile | takeWhile}\n   */\n  takeWhile(f: (a: A) => unknown): FxIterable<A> {\n    return new FxIterable(takeWhile(f, this.iterable));\n  }\n\n  /**\n   * Iterate over an input list,\n   * calling a provided `f` for each element in the Iterable.\n   *\n   * see {@link https://fxts.dev/docs/peek | peek}\n   */\n  peek(f: (a: A) => unknown): FxIterable<A> {\n    return new FxIterable(peek(f, this.iterable));\n  }\n\n  /**\n   * Returns all but the first `length` elements of the given iterable.\n   *\n   * see {@link https://fxts.dev/docs/drop | drop}\n   */\n  drop(length: number): FxIterable<A> {\n    return new FxIterable(drop(length, this.iterable));\n  }\n\n  /**\n   * Returns Iterable of the given elements from startIndex(inclusive) to endIndex(exclusive).\n   *\n   * see {@link https://fxts.dev/docs/slice | slice}\n   */\n  slice(start: number, end?: number): FxIterable<A> {\n    return isUndefined(end)\n      ? new FxIterable(slice(start, this.iterable))\n      : new FxIterable(slice(start, end, this.iterable));\n  }\n\n  /**\n   *\n   * `chain` allows you to use functions that are not provided in method chaining.\n   * The functions available for the `chain` argument return an asyncIterable.\n   *\n   * @example\n   * ```\n   * fx(range(1, 4))\n   *   .chain(append(4))\n   *   .chain(append(5))\n   *   .toArray(); // [1, 2, 3, 4, 5]\n   * ```\n   */\n  chain<B>(f: (iterable: Iterable<A>) => Iterable<B>): FxIterable<B> {\n    return new FxIterable(f(this.iterable));\n  }\n\n  /**\n   * Returns AsyncIterable, `toAsync` used when you want to handle Promise values inside Iterable.\n   *\n   * see {@link https://fxts.dev/docs/toAsync | toAsync}\n   */\n  toAsync(): FxAsyncIterable<A> {\n    return new FxAsyncIterable(toAsync(this.iterable));\n  }\n\n  /**\n   * Splits Iterable into sets, grouped by the result of running each value through `f`.\n   *\n   * see {@link https://fxts.dev/docs/groupBy | groupBy}\n   */\n  groupBy(f: (a: A) => Key) {\n    return groupBy(f, this.iterable);\n  }\n\n  /**\n   * Given `f` that generates a key,\n   * turns a list of objects into an object indexing the objects by the given key.\n   * Note that if multiple objects generate the same value for the indexing key only the last value will be included in the generated object.\n   *\n   * see {@link https://fxts.dev/docs/indexBy | indexBy}\n   */\n  indexBy(f: (a: A) => Key) {\n    return indexBy(f, this.iterable);\n  }\n\n  /**\n   * Returns true if any of the values in AsyncIterable pass `f` truth test\n   *\n   * see {@link https://fxts.dev/docs/some | some}\n   */\n  some(f: (a: A) => unknown): boolean {\n    return some(f, this.iterable);\n  }\n\n  /**\n   * Returns true if all of the values in AsyncIterable pass the `f` truth test.\n   *\n   * see {@link https://fxts.dev/docs/every | every}\n   */\n  every(f: (a: A) => unknown): boolean {\n    return every(f, this.iterable);\n  }\n\n  /**\n   * Returns all elements in the given iterable into a string separated by separator.\n   *\n   * see {@link https://fxts.dev/docs/join | join}\n   */\n  join(sep: string): string {\n    return join(sep, this.iterable);\n  }\n\n  /**\n   * Looks through each value in AsyncIterable, returning the first one that passes a truth test `f`,\n   * or `undefined` if no value passes the test.\n   *\n   * see {@link https://fxts.dev/docs/find | find}\n   */\n  find(f: (a: A) => unknown): A | undefined {\n    return find(f, this.iterable);\n  }\n\n  /**\n   * Returns the index of the first element of AsyncIterable which matches f, or -1 if no element matches.\n   *\n   * see {@link https://fxts.dev/docs/findIndex | findIndex}\n   */\n  findIndex(f: (a: A) => unknown): number {\n    return findIndex(f, this.iterable);\n  }\n\n  /**\n   * Also known as foldl, this method boils down a list of values into a single value.\n   *\n   * see {@link https://fxts.dev/docs/reduce | reduce}\n   */\n  reduce<B>(f: SyncReducer<Cast<A, B>, A>, seed?: B): Cast<A, B> {\n    return isUndefined(seed)\n      ? reduce(f, this.iterable)\n      : reduce(f, seed as any, this.iterable);\n  }\n\n  /**\n   * Iterates over Iterable, applying each in turn to `f`.\n   *\n   * see {@link https://fxts.dev/docs/each | each}\n   */\n  each(f: (a: A) => unknown): void {\n    return each(f, this.iterable);\n  }\n\n  /**\n   * Takes item from Iterable and returns an array.\n   *\n   * see {@link https://fxts.dev/docs/toArray | toArray}\n   */\n  toArray(): Array<A> {\n    return Array.from(this.iterable);\n  }\n\n  toIterator(): Array<A> {\n    return Array.from(this.iterable);\n  }\n}\n\n/**\n * `fx` allows functions provided by existing `fxts` to be used in a method chaining.\n *  Not all functions are provided as methods and can be connected through `chain` if necessary.\n *\n *  see {@link https://fxts.dev/docs/method-chaining | guide}\n *\n * @example\n * ```ts\n * const syncArr1 = fx([1, 2, 3, 4])\n *   .map((a) => a + 10)\n *   .toArray(); // [11, 12, 13, 14]\n *\n * // If you want to use another function that is not provided for the method, use `chain`.\n * const syncArr2 = fx([1, 2, 3, 4])\n *   .chain(append(5))\n *   .map((a) => a + 10)\n *   .toArray(); // [11, 12, 13, 14, 15]\n *\n * const asyncArr1 = await fx([1, 2, 3, 4])\n *   .toAsync()\n *   .map((a) => a + 10)\n *   .toArray(); // [11, 12, 13, 14]\n *\n * const asyncArr2 = await fx(toAsync([1, 2, 3, 4]))\n *   .map((a) => a + 10)\n *   .toArray(); // [11, 12, 13, 14]\n * ```\n */\nfunction fx<T extends Iterable<unknown> | AsyncIterable<unknown>>(\n  a: T,\n): T extends Iterable<unknown>\n  ? FxIterable<IterableInfer<T>>\n  : FxAsyncIterable<IterableInfer<T>> {\n  if (isAsyncIterable(a)) {\n    return new FxAsyncIterable(a) as any;\n  } else if (isIterable(a)) {\n    return new FxIterable(a) as any;\n  }\n\n  throw new TypeError(`'fx' must be type of Iterable or AsyncIterable`);\n}\n\nexport default fx;\n"]}